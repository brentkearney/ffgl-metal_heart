// @author ciphrd <https://instagram.com/ciphrd>
// @license MIT
// 
// This shader is used as an example for an article I wrote about "Pixel sorting using a well-crafted vector field".
// Everything is explained in the article if you're looking for explanations.
//
// https://ciphered.xyz/2020/04/08/pixel-sorting-on-shader-using-well-crafted-sorting-filters-glsl/
//

#define THRESHOLD 0.2



// grayscale average of the colors
float gscale (vec3 c) { return (c.r+c.g+c.b)/3.; }


void mainImage (out vec4 fragColor, in vec2 fragCoord)
{
	// uvs
	vec2 uv = fragCoord.xy / iResolution.xy;
	
	if (iFrame < 10) {
		fragColor = texture(iChannel0, uv);
		return;
	}
	
	
	// the frame number parity, -1 is odd 1 is even
	float fParity = mod(float(iFrame), 2.) * 2. - 1.;
    
    // we differentiate every 1/2 pixel on the horizontal axis, will be -1 or 1
    float vp = mod(floor(uv.x * iResolution.x), 2.0) * 2. - 1.;
    
    
	vec2 dir = vec2(1, 0);
    dir*= fParity * vp;
	dir/= iResolution.xy;

	// we sort
	vec4 curr = texture(iChannel1, uv);
	vec4 comp = texture(iChannel1, uv + dir);
	
	float gCurr = gscale(curr.rgb);
	float gComp = gscale(comp.rgb);
	
	
	// we prevent the sort from happening on the borders
	if (uv.x + dir.x < 0.0 || uv.x + dir.x > 1.0) {
		fragColor = curr;
		return;
	}
	
	// the direction of the displacement defines the order of the comparaison 
	if (dir.x < 0.0) {
		if (gCurr > THRESHOLD && gComp > gCurr) {
			fragColor = comp;
		} else {
			fragColor = curr;
		}
	} 
	else {
		if (gComp > THRESHOLD && gCurr >= gComp) {
			fragColor = comp;
		} else {
			fragColor = curr;
		}
	}
}
